{"version":3,"sources":["hooks/http.hook.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","actions/index.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","reducers/index.js","store/index.js","index.js"],"names":["useHttp","request","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","HeroesListItem","_ref","elementClassName","name","description","element","onDelete","_jsxs","className","children","_jsx","src","alt","style","onClick","type","Spinner","role","baseUrl","HeroesList","filteredHeroes","heroesLoadingStatus","useSelector","state","dispatch","useDispatch","useEffect","then","data","payload","catch","id","console","log","heroDeleted","err","elements","arr","CSSTransition","timeout","classNames","map","props","TransitionGroup","component","HeroesAddForm","heroName","setHeroName","useState","heroDescr","setHeroDescr","heroElement","setHeroElement","filters","filtersLoadingStatus","onSubmit","preventDefault","newHero","uuidv4","hero","JSON","stringify","res","htmlFor","required","placeholder","value","onChange","target","renderFilters","label","HeroesFilters","activeFilter","filtersFetched","btnClass","App","initialState","heroes","reducer","action","filter","item","newCreatedHeroList","newHeroList","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","React","StrictMode","Provider","document","getElementById"],"mappings":"sOAEO,MAAMA,EAAUA,KAGnB,MAAMC,EAAUC,uBAAYC,eAAOC,GAAsF,IAAjFC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAI5F,IACI,MAAMK,QAAiBC,MAAMR,EAAK,CAACC,SAAQI,OAAMC,YAEjD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,cAAAW,OAAaJ,EAASK,SAKhE,aAFmBL,EAASM,MAGhC,CAAE,MAAMC,GAEJ,MAAMA,CACV,CACJ,GAAG,IAMH,MAAO,CAACjB,UAIH,E,+BCSMkB,MAzCQC,IAA6C,IAE5DC,GAFgB,KAACC,EAAI,YAAEC,EAAW,QAAEC,EAAO,SAAEC,GAASL,EAI1D,OAAQI,GACJ,IAAK,OACDH,EAAmB,wBACnB,MACJ,IAAK,QACDA,EAAmB,yBACnB,MACJ,IAAK,OACDA,EAAmB,yBACnB,MACJ,IAAK,QACDA,EAAmB,2BACnB,MACJ,QACIA,EAAmB,yBAG3B,OACIK,eAAA,MACIC,UAAS,2CAAAZ,OAA6CM,GAAmBO,SAAA,CACzEC,cAAA,OAAKC,IAAI,6EACJH,UAAU,0BACVI,IAAI,eACJC,MAAO,CAAC,UAAa,WAC1BN,eAAA,OAAKC,UAAU,YAAWC,SAAA,CAEtBC,cAAA,MAAIF,UAAU,aAAYC,SAAEN,IAC5BO,cAAA,KAAGF,UAAU,YAAWC,SAAEL,OAE9BM,cAAA,QAAMI,QAASR,EACTE,UAAU,wFAAuFC,SACnGC,cAAA,UAAQK,KAAK,SAASP,UAAU,sBAAsB,aAAW,cAEpE,EC7BEQ,MARCA,IAERN,cAAA,OAAKF,UAAU,8BAA8BS,KAAK,SAAQR,SACtDC,cAAA,QAAMF,UAAU,kBAAiBC,SAAC,iB,MCY9C,MAAMS,EAEJ,iFAiEaC,MA/DIA,KACf,MAAM,eAACC,EAAc,oBAAEC,GAAuBC,aAAYC,GAASA,IAC7DC,EAAWC,eACX,QAAC3C,GAAWD,IAElB6C,qBAAU,KACNF,ECzBG,CACHT,KAAM,oBDyBNjC,EAAQ,GAADc,OAAIsB,EAAO,YACbS,MAAKC,GAAQJ,ECrBf,CACHT,KAAM,iBACNc,QDmByCD,MACpCE,OAAM,IAAMN,ECfd,CACHT,KAAM,2BDc2C,GAGlD,IAKH,MAAMT,EAAWvB,uBAAagD,IAE1BjD,EAAQ,GAADc,OAAIsB,EAAO,YAAAtB,OAAWmC,GAAM,UAC9BJ,MAAKC,GAAQI,QAAQC,IAAIL,EAAM,aAC/BD,KAAKH,ECWUO,KACjB,CACHhB,KAAM,eACNc,QAASE,IDdUG,CAAYH,KAC1BD,OAAMK,GAAOH,QAAQC,IAAIE,IAAK,GAEpC,CAACrD,IAEJ,GAA4B,YAAxBuC,EACA,OAAOX,cAACM,EAAO,IACZ,GAA4B,UAAxBK,EACP,OAAOX,cAAA,MAAIF,UAAU,mBAAkBC,SAAC,0FAG5C,MAuBM2B,EAtBiB,KADGC,EAuBQjB,GAtBtBhC,OAEAsB,cAAC4B,IAAa,CACVC,QAAS,EACTC,WAAW,OAAM/B,SACjBC,cAAA,MAAIF,UAAU,mBAAkBC,SAAC,uFAKtC4B,EAAII,KAAIxC,IAAqB,IAApB,GAAC8B,KAAOW,GAAMzC,EAC1B,OACIS,cAAC4B,IAAa,CAEVC,QAAS,IACTC,WAAW,OAAM/B,SACjBC,cAACV,EAAc,IAAM0C,EAAOpC,SAAUA,IAAMA,EAASyB,MAHhDA,EAIO,IAlBFM,MAwB1B,OACI3B,cAACiC,IAAe,CAACC,UAAU,KAAInC,SAC1B2B,GACa,E,QE8CXS,MA1GOA,KAElB,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAWC,GAAgBF,mBAAS,KACpCG,EAAaC,GAAkBJ,mBAAS,KAEzC,QAACK,EAAO,qBAAEC,GAAwBhC,aAAYC,GAASA,IACvDC,EAAWC,eACX,QAAC3C,GAAWD,IAmDlB,OACI0B,eAAA,QAAMC,UAAU,+BAA+B+C,SAlD1BxD,IACrBA,EAAEyD,iBAIF,MAAMC,EAAU,CACZ1B,GAAI2B,cACJvD,KAAM2C,EACN1C,YAAa6C,EACb5C,QAAS8C,GDOOQ,MCGpB7E,EAAQ,GAADc,OAFL,iFAEgB,WAAW,OAAQgE,KAAKC,UAAUJ,IAC/C9B,MAAKmC,GAAO9B,QAAQC,IAAI6B,EAAK,iGAC7BnC,KAAKH,GDLUmC,ECKWF,EDJ5B,CACH1C,KAAM,eACNc,QAAS8B,MCGJ7B,OAAMK,GAAOH,QAAQC,IAAIE,KAG9BY,EAAY,IACZG,EAAa,IACbE,EAAe,GAAG,EAuBuD3C,SAAA,CACrEF,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACjBC,cAAA,SAAOqD,QAAQ,OAAOvD,UAAU,kBAAiBC,SAAC,2FAClDC,cAAA,SACIsD,UAAQ,EACRjD,KAAK,OACLZ,KAAK,OACLK,UAAU,eACVuB,GAAG,OACHkC,YAAY,8EACZC,MAAOpB,EACPqB,SAAWpE,GAAMgD,EAAYhD,EAAEqE,OAAOF,YAG9C3D,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACjBC,cAAA,SAAOqD,QAAQ,OAAOvD,UAAU,kBAAiBC,SAAC,qDAClDC,cAAA,YACIsD,UAAQ,EACR7D,KAAK,OACLK,UAAU,eACVuB,GAAG,OACHkC,YAAY,sDACZpD,MAAO,CAAC,OAAU,SAClBqD,MAAOjB,EACPkB,SAAWpE,GAAMmD,EAAanD,EAAEqE,OAAOF,YAG/C3D,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACjBC,cAAA,SAAOqD,QAAQ,UAAUvD,UAAU,aAAYC,SAAC,yHAChDF,eAAA,UACIyD,UAAQ,EACRxD,UAAU,cACVuB,GAAG,UACH5B,KAAK,UACL+D,MAAOf,EACPgB,SAAWpE,GAAMqD,EAAerD,EAAEqE,OAAOF,OAAOzD,SAAA,CAChDC,cAAA,UAAAD,SAAS,0GAxDH4D,EAAChB,EAASxD,IACb,YAAXA,EACOa,cAAA,UAAAD,SAAQ,4GACG,UAAXZ,EACAa,cAAA,UAAAD,SAAQ,0FAIf4C,GAAWA,EAAQjE,OAAS,EACrBiE,EAAQZ,KAAIxC,IAAoB,IAAnB,KAACE,EAAI,MAAEmE,GAAMrE,EAG7B,GAAa,QAATE,EAEJ,OAAOO,cAAA,UAAmBwD,MAAO/D,EAAKM,SAAE6D,GAApBnE,EAAmC,SAN/D,EAiDakE,CAAchB,EAASC,SAIhC5C,cAAA,UAAQK,KAAK,SAASP,UAAU,kBAAiBC,SAAC,iDAC/C,E,iBC1CA8D,MA/DOA,KAElB,MAAM,QAAClB,EAAO,qBAAEC,EAAoB,aAAEkB,GAAgBlD,aAAYC,GAASA,IACrEC,EAAWC,eACX,QAAC3C,GAAWD,IAiBlB,GAdA6C,qBAAU,KAMNF,EFTG,CACHT,KAAM,qBESNjC,EAAQ,GAADc,OAHW,iFAGA,aACb+B,MAAKC,GAAQJ,EFNK6B,KACpB,CACHtC,KAAM,kBACNc,QAASwB,IEGkBoB,CAAe7C,MACrCE,OAAM,IAAMN,EFCd,CACHT,KAAM,4BEF4C,GAGnD,IAE0B,YAAzBuC,EACA,OAAO5C,cAACM,EAAO,IACZ,GAA6B,UAAzBsC,EACP,OAAO5C,cAAA,MAAIF,UAAU,mBAAkBC,SAAC,0FAG5C,MAsBM2B,EArBiB,KADAC,EAsBQgB,GArBnBjE,OACGsB,cAAA,MAAIF,UAAU,mBAAkBC,SAAC,uGAIrC4B,EAAII,KAAIxC,IAA+B,IAA9B,KAACE,EAAI,UAAEK,EAAS,MAAE8D,GAAMrE,EAGpC,MAAMyE,EAAWlC,IAAW,MAAOhC,EAAW,CAC1C,OAAUL,IAASqE,IAGvB,OAAO9D,cAAA,UAEKqB,GAAI5B,EACJK,UAAWkE,EACX5D,QAASA,IAAMU,EFrB5B,CACHT,KAAM,wBACNc,QEmB4D1B,IAAOM,SACjD6D,GAJGnE,EAIY,IAlBdkC,MAwBvB,OACI3B,cAAA,OAAKF,UAAU,sBAAqBC,SAChCF,eAAA,OAAKC,UAAU,YAAWC,SAAA,CACtBC,cAAA,KAAGF,UAAU,YAAWC,SAAC,sLACzBC,cAAA,OAAKF,UAAU,YAAWC,SACrB2B,QAGP,E,MCtDCuC,MAfHA,IAGJjE,cAAA,QAAMF,UAAU,MAAKC,SACjBF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACpBC,cAACS,EAAU,IACXZ,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACjCC,cAACmC,EAAa,IACdnC,cAAC6D,EAAa,Y,QCdlC,MAAMK,EAAe,CACjBC,OAAQ,GACRxD,oBAAqB,OACrBgC,QAAS,GACTmB,aAAc,MACdpD,eAAgB,IA+EL0D,MA5EC,WAAmC,IAAlCvD,EAAKpC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGyF,EAAcG,EAAM5F,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzC,OAAQ0F,EAAOhE,MACX,IAAK,kBACD,MAAO,IACAQ,EACHF,oBAAqB,WAE7B,IAAK,iBACD,MAAO,IACAE,EACHsD,OAAQE,EAAOlD,QAIfT,eAAuC,QAAvBG,EAAMiD,aACNO,EAAOlD,QACPkD,EAAOlD,QAAQmD,QAAOC,GAAQA,EAAK5E,UAAYkB,EAAMiD,eACrEnD,oBAAqB,QAE7B,IAAK,wBACD,MAAO,IACAE,EACHF,oBAAqB,SAE7B,IAAK,mBACD,MAAO,IACAE,EACH+B,qBAAsB,WAE9B,IAAK,kBACD,MAAO,IACA/B,EACH8B,QAAS0B,EAAOlD,QAChByB,qBAAsB,QAE9B,IAAK,yBACD,MAAO,IACA/B,EACH+B,qBAAsB,SAE9B,IAAK,wBACD,MAAO,IACA/B,EACHiD,aAAcO,EAAOlD,QACrBT,eAAmC,QAAnB2D,EAAOlD,QACPN,EAAMsD,OACNtD,EAAMsD,OAAOG,QAAOC,GAAQA,EAAK5E,UAAY0E,EAAOlD,WAI5E,IAAK,eAED,IAAIqD,EAAqB,IAAI3D,EAAMsD,OAAQE,EAAOlD,SAClD,MAAO,IACAN,EACHsD,OAAQK,EAER9D,eAAuC,QAAvBG,EAAMiD,aACNU,EACAA,EAAmBF,QAAOC,GAAQA,EAAK5E,UAAYkB,EAAMiD,gBAEjF,IAAK,eAED,MAAMW,EAAc5D,EAAMsD,OAAOG,QAAOC,GAAQA,EAAKlD,KAAOgD,EAAOlD,UACnE,MAAO,IACAN,EACHsD,OAAQM,EAER/D,eAAuC,QAAvBG,EAAMiD,aACNW,EACAA,EAAYH,QAAOC,GAAQA,EAAK5E,UAAYkB,EAAMiD,gBAE1E,QAAS,OAAOjD,EAExB,EC7Ee6D,MAFDC,YAAYP,EAASQ,OAAOC,8BAAgCD,OAAOC,gC,MCMjFC,IAASC,OACP/E,cAACgF,IAAMC,WAAU,CAAAlF,SACfC,cAACkF,IAAQ,CAACR,MAAOA,EAAM3E,SACrBC,cAACiE,EAAG,QAGRkB,SAASC,eAAe,Q","file":"static/js/main.4509c8e2.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nexport const useHttp = () => {\n    // const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        // setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            // setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    // const clearError = useCallback(() => {\n        // setProcess('loading');\n    // }, []);\n\n    return {request, \n            // clearError, \n            // process, \n            // setProcess\n        }\n}","\nconst HeroesListItem = ({name, description, element, onDelete}) => {\n\n    let elementClassName;\n\n    switch (element) {\n        case 'fire':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'water':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'wind':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'earth':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    return (\n        <li \n            className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n            <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                 className=\"img-fluid w-25 d-inline\" \n                 alt=\"unknown hero\" \n                 style={{'objectFit': 'cover'}}/>\n            <div className=\"card-body\">\n                \n                <h3 className=\"card-title\">{name}</h3>\n                <p className=\"card-text\">{description}</p>\n            </div>\n            <span onClick={onDelete} \n                  className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\"></button>\n            </span>\n        </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport { heroesFetching, heroesFetched, heroesFetchingError, heroDeleted } from '../../actions';\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\n\nimport './heroesList.scss';\n\n// Задача для этого компонента:\n// При клике на \"крестик\" идет удаление персонажа из общего состояния\n// Усложненная задача:\n// Удаление идет и с json файла при помощи метода DELETE\n\nconst baseUrl = process.env.NODE_ENV === 'development'\n? 'http://localhost:3001'\n: 'https://my-json-server.typicode.com/systemshock89/react-redux-hero-admin-panel';\n\nconst HeroesList = () => {\n    const {filteredHeroes, heroesLoadingStatus} = useSelector(state => state);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    useEffect(() => {\n        dispatch(heroesFetching());\n        request(`${baseUrl}/heroes`)\n            .then(data => dispatch(heroesFetched(data)))\n            .catch(() => dispatch(heroesFetchingError()))\n\n        // eslint-disable-next-line\n    }, []);\n\n    // Функция берет id и по нему удаляет ненужного персонажа из store\n    // ТОЛЬКО если запрос на удаление прошел успешно\n    // Отслеживайте цепочку действий actions => reducers\n    const onDelete = useCallback((id) => {\n        // Удаление персонажа по его id\n        request(`${baseUrl}/heroes/${id}`, \"DELETE\")\n            .then(data => console.log(data, 'Deleted')) // в дате будет удаленный персонаж\n            .then(dispatch(heroDeleted(id))) // только когда перс был удален с сервера диспэтчит действие\n            .catch(err => console.log(err));\n        // eslint-disable-next-line  \n    }, [request]);\n\n    if (heroesLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (heroesLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return (\n                <CSSTransition\n                    timeout={0}\n                    classNames=\"hero\">\n                    <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n                </CSSTransition>\n            )\n        }\n\n        return arr.map(({id, ...props}) => {\n            return (\n                <CSSTransition \n                    key={id}\n                    timeout={500}\n                    classNames=\"hero\">\n                    <HeroesListItem  {...props} onDelete={() => onDelete(id)}/>\n                </CSSTransition>\n            )\n        })\n    }\n\n    const elements = renderHeroesList(filteredHeroes);\n    return (\n        <TransitionGroup component=\"ul\">\n            {elements}\n        </TransitionGroup>\n    )\n}\n\nexport default HeroesList;","export const heroesFetching = () => {\n    return {\n        type: 'HEROES_FETCHING'\n    }\n}\n\nexport const heroesFetched = (heroes) => {\n    return {\n        type: 'HEROES_FETCHED',\n        payload: heroes\n    }\n}\n\nexport const heroesFetchingError = () => {\n    return {\n        type: 'HEROES_FETCHING_ERROR'\n    }\n}\n\nexport const filtersFetching = () => {\n    return {\n        type: 'FILTERS_FETCHING'\n    }\n}\n\nexport const filtersFetched = (filters) => {\n    return {\n        type: 'FILTERS_FETCHED',\n        payload: filters\n    }\n}\n\nexport const filtersFetchingError = () => {\n    return {\n        type: 'FILTERS_FETCHING_ERROR'\n    }\n}\n\nexport const activeFilterChanged = (filter) => {\n    return {\n        type: 'ACTIVE_FILTER_CHANGED',\n        payload: filter\n    }\n}\n\nexport const heroCreated = (hero) => {\n    return {\n        type: 'HERO_CREATED',\n        payload: hero\n    }\n}\n\nexport const heroDeleted = (id) => {\n    return {\n        type: 'HERO_DELETED',\n        payload: id\n    }\n}","\n\n// Задача для этого компонента:\n// Реализовать создание нового героя с введенными данными. Он должен попадать\n// в общее состояние и отображаться в списке + фильтроваться\n// Уникальный идентификатор персонажа можно сгенерировать через uiid\n// Усложненная задача:\n// Персонаж создается и в файле json при помощи метода POST\n// Дополнительно:\n// Элементы <option></option> желательно сформировать на базе\n// данных из фильтров\n\nimport {useHttp} from '../../hooks/http.hook';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { heroCreated } from '../../actions';\n\nconst HeroesAddForm = () => {\n    // Состояния для контроля формы\n    const [heroName, setHeroName] = useState('');\n    const [heroDescr, setHeroDescr] = useState('');\n    const [heroElement, setHeroElement] = useState('');\n\n    const {filters, filtersLoadingStatus} = useSelector(state => state);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        // Можно сделать и одинаковые названия состояний,\n        // хотел показать вам чуть нагляднее\n        // Генерация id через библиотеку\n        const newHero = {\n            id: uuidv4(),\n            name: heroName,\n            description: heroDescr,\n            element: heroElement\n        }\n\n        // Отправляем данные на сервер в формате JSON\n        // ТОЛЬКО если запрос успешен - отправляем персонажа в store\n\n        const baseUrl = process.env.NODE_ENV === 'development'\n        ? 'http://localhost:3001'\n        : 'https://my-json-server.typicode.com/systemshock89/react-redux-hero-admin-panel';\n\n        request(`${baseUrl}/heroes`, \"POST\", JSON.stringify(newHero))\n            .then(res => console.log(res, 'Отправка успешна'))\n            .then(dispatch(heroCreated(newHero)))\n            .catch(err => console.log(err));\n\n        // Очищаем форму после отправки\n        setHeroName('');\n        setHeroDescr('');\n        setHeroElement('');\n    }\n\n    const renderFilters = (filters, status) => {\n        if (status === \"loading\") {\n            return <option>Загрузка элементов</option>\n        } else if (status === \"error\") {\n            return <option>Ошибка загрузки</option>\n        }\n        \n        // Если фильтры есть, то рендерим их\n        if (filters && filters.length > 0 ) {\n            return filters.map(({name, label}) => {\n                // Один из фильтров нам тут не нужен\n                // eslint-disable-next-line\n                if (name === 'all')  return;\n\n                return <option key={name} value={name}>{label}</option>\n            })\n        }\n    }\n\n    return (\n        <form className=\"border p-4 shadow-lg rounded\" onSubmit={onSubmitHandler}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\n                <input \n                    required\n                    type=\"text\" \n                    name=\"name\" \n                    className=\"form-control\" \n                    id=\"name\" \n                    placeholder=\"Как меня зовут?\"\n                    value={heroName}\n                    onChange={(e) => setHeroName(e.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\n                <textarea\n                    required\n                    name=\"text\" \n                    className=\"form-control\" \n                    id=\"text\" \n                    placeholder=\"Что я умею?\"\n                    style={{\"height\": '130px'}}\n                    value={heroDescr}\n                    onChange={(e) => setHeroDescr(e.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\n                <select \n                    required\n                    className=\"form-select\" \n                    id=\"element\" \n                    name=\"element\"\n                    value={heroElement}\n                    onChange={(e) => setHeroElement(e.target.value)}>\n                    <option >Я владею элементом...</option>\n                    {renderFilters(filters, filtersLoadingStatus)}\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\n        </form>\n    )\n}\n\nexport default HeroesAddForm;","\nimport {useHttp} from '../../hooks/http.hook';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { filtersFetching, filtersFetched, filtersFetchingError, activeFilterChanged } from '../../actions';\nimport Spinner from '../spinner/Spinner';\n\n// Задача для этого компонента:\n// Фильтры должны формироваться на основании загруженных данных\n// Фильтры должны отображать только нужных героев при выборе\n// Активный фильтр имеет класс active\n// Изменять json-файл для удобства МОЖНО!\n// Представьте, что вы попросили бэкенд-разработчика об этом\n\nconst HeroesFilters = () => {\n\n    const {filters, filtersLoadingStatus, activeFilter} = useSelector(state => state);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    // Запрос на сервер для получения фильтров и последовательной смены состояния\n    useEffect(() => {\n\n        const baseUrl = process.env.NODE_ENV === 'development'\n                        ? 'http://localhost:3001'\n                        : 'https://my-json-server.typicode.com/systemshock89/react-redux-hero-admin-panel';\n\n        dispatch(filtersFetching());\n        request(`${baseUrl}/filters`)\n            .then(data => dispatch(filtersFetched(data)))\n            .catch(() => dispatch(filtersFetchingError()))\n\n        // eslint-disable-next-line\n    }, []);\n\n    if (filtersLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (filtersLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }    \n\n    const renderFilters = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Фильтры не найдены</h5>\n        }\n\n        // Данные в json-файле я расширил классами и текстом\n        return arr.map(({name, className, label}) => {\n\n            // Используем библиотеку classnames и формируем классы динамически\n            const btnClass = classNames('btn', className, {\n                'active': name === activeFilter\n            });\n            \n            return <button \n                        key={name} \n                        id={name} \n                        className={btnClass}\n                        onClick={() => dispatch(activeFilterChanged(name))}\n                        >{label}</button>\n        })\n    }\n\n    const elements = renderFilters(filters);\n\n    return (\n        <div className=\"card shadow-lg mt-4\">\n            <div className=\"card-body\">\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n                <div className=\"btn-group\">\n                    {elements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","const initialState = {\n    heroes: [], // список героев, полученных с сервера\n    heroesLoadingStatus: 'idle', // idle - бездействие\n    filters: [],\n    activeFilter: 'all',\n    filteredHeroes: [] // отфильтрованный список героев, кот-е будут отображаться в верстке\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'HEROES_FETCHING':  \n            return {\n                ...state,\n                heroesLoadingStatus: 'loading'\n            }\n        case 'HEROES_FETCHED': // получили\n            return {\n                ...state,\n                heroes: action.payload,\n                // ЭТО МОЖНО СДЕЛАТЬ И ПО ДРУГОМУ\n                // Я специально показываю вариант с действиями тут, но более правильный вариант\n                // будет показан в следующем уроке\n                filteredHeroes: state.activeFilter === 'all' ? \n                                action.payload : \n                                action.payload.filter(item => item.element === state.activeFilter),\n                heroesLoadingStatus: 'idle'\n            }\n        case 'HEROES_FETCHING_ERROR':\n            return {\n                ...state,\n                heroesLoadingStatus: 'error'\n            }\n        case 'FILTERS_FETCHING':\n            return {\n                ...state,\n                filtersLoadingStatus: 'loading'\n            }\n        case 'FILTERS_FETCHED':\n            return {\n                ...state,\n                filters: action.payload,\n                filtersLoadingStatus: 'idle'\n            }      \n        case 'FILTERS_FETCHING_ERROR':\n            return {\n                ...state,\n                filtersLoadingStatus: 'error'\n            }                  \n        case 'ACTIVE_FILTER_CHANGED':\n            return {\n                ...state,\n                activeFilter: action.payload,\n                filteredHeroes: action.payload === 'all' ? \n                                state.heroes :\n                                state.heroes.filter(item => item.element === action.payload)\n            }\n        // Самая сложная часть - это показывать новые элементы по фильтрам\n        // при создании или удалении       \n        case 'HERO_CREATED':\n            // Формируем новый массив    \n            let newCreatedHeroList = [...state.heroes, action.payload];\n            return {\n                ...state,\n                heroes: newCreatedHeroList,\n                // Фильтруем новые данные по фильтру, который сейчас применяется\n                filteredHeroes: state.activeFilter === 'all' ? \n                                newCreatedHeroList : \n                                newCreatedHeroList.filter(item => item.element === state.activeFilter)\n            }            \n        case 'HERO_DELETED': \n            // Формируем новый массив\n            const newHeroList = state.heroes.filter(item => item.id !== action.payload);\n            return {\n                ...state,\n                heroes: newHeroList,\n                // Фильтруем новые данные по фильтру, который сейчас применяется\n                filteredHeroes: state.activeFilter === 'all' ? \n                                newHeroList : \n                                newHeroList.filter(item => item.element === state.activeFilter)\n            }            \n        default: return state\n    }\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}